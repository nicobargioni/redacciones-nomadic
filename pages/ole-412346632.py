import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
import plotly.express as px
import plotly.graph_objects as go
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from utils import (
    load_google_sheet_data, 
    get_ga4_data,
    get_ga4_data_with_country,
    filter_media_urls,
    merge_sheets_with_ga4,
    create_media_config,
    normalize_url,
    check_login,
    get_ga4_growth_data,
    get_ga4_growth_data_custom
    get_monthly_pageviews_by_sheets
)

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Dashboard Ol√© - Cliente",
    page_icon="‚öΩ",
    layout="wide"
)

# Verificar login antes de mostrar contenido
if not check_login('ole', page_type='cliente'):
    st.stop()

# Obtener configuraci√≥n del medio
media_config = create_media_config()['ole']

st.title(f"{media_config['icon']} Dashboard de {media_config['name']}")
st.markdown("---")

# Sidebar con opciones
st.sidebar.header("‚öôÔ∏è Configuraci√≥n")

# Selector de rango de fechas para GA4
date_option = st.sidebar.selectbox(
    "Tipo de rango de fechas:",
    ["Preestablecido", "Personalizado"],
    key="date_option_ole"
)

if date_option == "Preestablecido":
    date_range = st.sidebar.selectbox(
        "Rango de datos GA4:",
        ["7daysAgo", "14daysAgo", "30daysAgo", "90daysAgo"],
        format_func=lambda x: {
            "7daysAgo": "√öltimos 7 d√≠as",
            "14daysAgo": "√öltimos 14 d√≠as", 
            "30daysAgo": "√öltimos 30 d√≠as",
            "90daysAgo": "√öltimos 90 d√≠as"
        }[x],
        key="preset_range_ole"
    )
    start_date_param = date_range
    end_date_param = "today"
else:
    col1, col2 = st.sidebar.columns(2)
    with col1:
        start_date_custom = st.date_input(
            "Fecha inicio:",
            value=datetime.now() - timedelta(days=7),
            key="start_date_ole"
        )
    with col2:
        end_date_custom = st.date_input(
            "Fecha fin:",
            value=datetime.now(),
            key="end_date_ole"
        )
    
    # Convertir fechas a formato GA4
    start_date_param = start_date_custom.strftime("%Y-%m-%d")
    end_date_param = end_date_custom.strftime("%Y-%m-%d")
    
    # Validar que la fecha de inicio sea anterior a la fecha de fin
    if start_date_custom > end_date_custom:
        st.sidebar.error("‚ö†Ô∏è La fecha de inicio debe ser anterior a la fecha de fin")
        start_date_param = "7daysAgo"
        end_date_param = "today"

# Bot√≥n de actualizaci√≥n
st.sidebar.markdown("---")
if st.sidebar.button("üîÑ Actualizar datos"):
    st.cache_data.clear()
    st.rerun()

# Usar archivo de credenciales (por defecto usa medios, cambiar si es necesario)
credentials_file = "credentials_analytics_acceso_medios.json"

# Cargar datos
with st.spinner('Cargando datos...'):
    # Cargar datos del Google Sheet
    sheets_df = load_google_sheet_data()
    
    # Filtrar solo URLs de Ol√©
    if sheets_df is not None:
        sheets_filtered = filter_media_urls(sheets_df, media_config['domain'])
    else:
        sheets_filtered = pd.DataFrame()
    
    # Cargar datos de GA4 siempre filtrado por Estados Unidos
    ga4_df = get_ga4_data_with_country(
        media_config['property_id'],
        credentials_file,
        start_date=start_date_param,
        end_date=end_date_param,
        country_filter="United States"
    )

# Verificar si hay datos
if sheets_filtered.empty and (ga4_df is None or ga4_df.empty):
    st.error("‚ö†Ô∏è No se encontraron datos para mostrar")
    st.info(f"""
    **Posibles causas:**
    - No hay URLs de {media_config['domain']} en el Google Sheet
    - Error al conectar con Google Analytics 4
    - Credenciales incorrectas o sin permisos para la propiedad {media_config['property_id']}
    - No hay datos desde Estados Unidos para el per√≠odo seleccionado
    """)
else:
    # Agregar filtro por autor si hay datos
    author_filter = None
    if not sheets_filtered.empty and 'autor' in sheets_filtered.columns:
        authors = sorted(sheets_filtered['autor'].dropna().unique())
        author_filter = st.sidebar.multiselect(
            "üë§ Filtrar por Autor:",
            options=authors,
            default=None,
            key="author_filter_ole"
        )
        
        if author_filter:
            sheets_filtered = sheets_filtered[sheets_filtered['autor'].isin(author_filter)]
            st.sidebar.info(f"üìä {len(sheets_filtered)} art√≠culos seleccionados")
    
    # Agregar filtros por fuente y medio de GA4
    source_filter = None
    medium_filter = None
    
    if ga4_df is not None and not ga4_df.empty:
        # Filtro por fuente (sessionSource)
        if 'sessionSource' in ga4_df.columns:
            sources = sorted(ga4_df['sessionSource'].dropna().unique())
            if len(sources) > 0:
                source_filter = st.sidebar.multiselect(
                    "üåê Filtrar por Fuente:",
                    options=sources,
                    default=None,
                    key="source_filter_ole",
                    help="Fuente del tr√°fico (Google, Facebook, etc.)"
                )
        
        # Filtro por medio (sessionMedium)
        if 'sessionMedium' in ga4_df.columns:
            mediums = sorted(ga4_df['sessionMedium'].dropna().unique())
            if len(mediums) > 0:
                medium_filter = st.sidebar.multiselect(
                    "üì° Filtrar por Medio:",
                    options=mediums,
                    default=None,
                    key="medium_filter_ole",
                    help="Medio del tr√°fico (organic, cpc, referral, etc.)"
                )
    
    # M√©tricas de datos cargados
    st.sidebar.markdown("---")
    st.sidebar.metric("URLs en Sheet", len(sheets_filtered) if not sheets_filtered.empty else 0)
    if ga4_df is not None:
        st.sidebar.metric("P√°ginas en GA4", ga4_df['pagePath'].nunique())
    else:
        st.sidebar.metric("P√°ginas en GA4", 0)
    
    st.sidebar.success("üá∫üá∏ Datos filtrados por: Estados Unidos")
    
    # Mergear datos si ambos est√°n disponibles
    if not sheets_filtered.empty and ga4_df is not None and not ga4_df.empty:
        # Aplicar filtros de fuente y medio a GA4 antes del merge
        ga4_filtered = ga4_df.copy()
        
        # Agregar columna url_normalized a ga4_filtered para uso posterior
        ga4_filtered['url_normalized'] = ga4_filtered['pagePath'].apply(
            lambda x: normalize_url(f"{media_config['domain']}{x}")
        )
        
        if source_filter:
            ga4_filtered = ga4_filtered[ga4_filtered['sessionSource'].isin(source_filter)]
        
        if medium_filter:
            ga4_filtered = ga4_filtered[ga4_filtered['sessionMedium'].isin(medium_filter)]
        
        if not ga4_filtered.empty:
            merged_df = merge_sheets_with_ga4(sheets_filtered, ga4_filtered, media_config['domain'])
            
            # Mostrar informaci√≥n de filtros aplicados
            if source_filter or medium_filter:
                filter_info = []
                if source_filter:
                    filter_info.append(f"Fuentes: {len(source_filter)}")
                if medium_filter:
                    filter_info.append(f"Medios: {len(medium_filter)}")
                st.sidebar.success(f"üéØ Filtros GA4: {', '.join(filter_info)}")
        else:
            st.warning("‚ö†Ô∏è Los filtros de fuente/medio no devolvieron datos de GA4")
            merged_df = sheets_filtered  # Solo datos del sheet
        
        # Obtener URLs del Sheet filtradas para las m√©tricas
        sheets_urls_for_metrics = None
        if not sheets_filtered.empty and 'url_normalized' in sheets_filtered.columns:
            sheets_urls_for_metrics = sheets_filtered['url_normalized'].dropna().unique().tolist()
        
        # Obtener pageviews del mes actual
        monthly_pageviews = 0
        if sheets_urls_for_metrics:
            with st.spinner("Cargando m√©tricas del mes..."):
                monthly_pageviews = get_monthly_pageviews_by_sheets(
                    media_config['property_id'],
                    credentials_file,
                    sheets_urls_for_metrics,
                    media_config['domain']
                )
        
        # M√©tricas principales - Dise√±o m√°s grande y prominente
        articles_count = len(sheets_filtered) if not sheets_filtered.empty else 0
        
        st.markdown(f"""
        <div style="text-align: center; padding: 20px 0;">
            <div style="margin-bottom: 30px;">
                <h2 style="color: #1f77b4; font-size: 24px; margin-bottom: 5px;">üìä Pageviews del mes (solo URLs del Sheet)</h2>
                <h1 style="color: #1f77b4; font-size: 48px; font-weight: bold; margin: 0;">{monthly_pageviews:,}</h1>
            </div>
            <div>
                <h3 style="color: #666; font-size: 20px; margin: 0;">üì∞ {articles_count:,} notas generadas</h3>
            </div>
        </div>
        """, unsafe_allow_html=True)
        st.markdown("---")
        
        # Obtener datos de GA4 para KPI (solo URLs del Sheet del mes actual)
        from datetime import datetime
        current_month_start = datetime.now().replace(day=1).strftime('%Y-%m-%d')
        current_month_today = datetime.now().strftime('%Y-%m-%d')
        
        # Cargar datos mensuales de GA4 siempre filtrado por Estados Unidos
        ga4_monthly_df = get_ga4_data_with_country(
            media_config['property_id'],
            credentials_file,
            start_date=current_month_start,
            end_date=current_month_today,
            country_filter="United States"
        )
        
        # Calcular Page Views solo de URLs que est√°n en el Sheet
        total_monthly_pageviews = 0
        if ga4_monthly_df is not None and not ga4_monthly_df.empty and not sheets_filtered.empty:
            # Mergear GA4 mensual con URLs del Sheet para obtener solo art√≠culos registrados
            merged_monthly = merge_sheets_with_ga4(sheets_filtered, ga4_monthly_df, media_config['domain'])
            if not merged_monthly.empty and 'screenPageViews' in merged_monthly.columns:
                total_monthly_pageviews = merged_monthly['screenPageViews'].sum()
        
        # Tabs para diferentes vistas
        tab1, tab2, tab3, tab4 = st.tabs(["üìä KPI", "üìã Datos", "üîù Top P√°ginas", "üìà Crecimiento"])
        
        with tab1:
            st.subheader("üìä KPI Mensual - Ol√© (Estados Unidos)")
            
            # Descripci√≥n del KPI
            st.markdown("""
            ### üéØ Objetivo del Mes
            **Meta:** 750,000 de Page Views desde Estados Unidos
            
            Este KPI mide el progreso hacia nuestro objetivo mensual de tr√°fico desde Estados Unidos en art√≠culos de Ol√©. 
            Se consideran √∫nicamente las URLs registradas en el Google Sheet y el tr√°fico proveniente de Estados Unidos.
            """)
            
            # Configuraci√≥n del KPI
            monthly_goal = 750000  # 750,000 Page Views desde USA
            current_progress = total_monthly_pageviews
            progress_percentage = (current_progress / monthly_goal) * 100 if monthly_goal > 0 else 0
            
            # M√©tricas principales del KPI
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric(
                    "üéØ Objetivo Mensual", 
                    f"{monthly_goal:,}",
                    help="Meta de Page Views desde Estados Unidos para este mes"
                )
            
            with col2:
                st.metric(
                    "üìà Progreso Actual", 
                    f"{current_progress:,}",
                    delta=f"{current_progress - monthly_goal:,}" if current_progress >= monthly_goal else None,
                    help="Page Views acumulados desde Estados Unidos en lo que va del mes (solo art√≠culos del Sheet)"
                )
            
            with col3:
                st.metric(
                    "üìä % Completado", 
                    f"{progress_percentage:.1f}%",
                    help="Porcentaje del objetivo alcanzado"
                )
            
            # Gr√°fico de progreso
            st.markdown("---")
            
            # Crear gr√°fico de gauge/progreso
            import plotly.graph_objects as go
            
            fig = go.Figure(go.Indicator(
                mode = "gauge+number+delta",
                value = current_progress,
                domain = {'x': [0, 1], 'y': [0, 1]},
                title = {'text': "Progreso hacia Objetivo Mensual - Estados Unidos"},
                delta = {'reference': monthly_goal, 'valueformat': ',.0f'},
                gauge = {
                    'axis': {'range': [None, monthly_goal * 1.2]},
                    'bar': {'color': media_config['color']},
                    'steps': [
                        {'range': [0, monthly_goal * 0.5], 'color': "lightgray"},
                        {'range': [monthly_goal * 0.5, monthly_goal * 0.8], 'color': "yellow"},
                        {'range': [monthly_goal * 0.8, monthly_goal], 'color': "lightgreen"}
                    ],
                    'threshold': {
                        'line': {'color': "red", 'width': 4},
                        'thickness': 0.75,
                        'value': monthly_goal
                    }
                }
            ))
            
            fig.update_layout(
                height=400,
                font={'color': "darkblue", 'family': "Arial"}
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
            # Informaci√≥n adicional
            current_date = datetime.now()
            days_in_month = current_date.day
            
            # Calcular d√≠as totales del mes actual
            if current_date.month == 12:
                next_month = current_date.replace(year=current_date.year + 1, month=1, day=1)
            else:
                next_month = current_date.replace(month=current_date.month + 1, day=1)
            
            days_total_month = (next_month - timedelta(days=1)).day
            daily_average = current_progress / days_in_month if days_in_month > 0 else 0
            projected_monthly = daily_average * days_total_month
            
            st.markdown("### üìà An√°lisis de Tendencia")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric(
                    "üìÖ D√≠as Transcurridos", 
                    f"{days_in_month}/{days_total_month}",
                    help="D√≠as transcurridos del mes actual"
                )
            
            with col2:
                st.metric(
                    "üìä Promedio Diario", 
                    f"{daily_average:,.0f}",
                    help="Page Views promedio por d√≠a en lo que va del mes"
                )
            
            with col3:
                projection_delta = projected_monthly - monthly_goal
                st.metric(
                    "üîÆ Proyecci√≥n Mensual", 
                    f"{projected_monthly:,.0f}",
                    delta=f"{projection_delta:,.0f}",
                    delta_color="normal" if projection_delta >= 0 else "inverse",
                    help="Estimaci√≥n de Page Views al final del mes seg√∫n tendencia actual"
                )
            
            # Disclaimer sobre el c√°lculo de proyecci√≥n
            st.markdown("---")
            st.info(f"""
            **üìã Metodolog√≠a de Proyecci√≥n:**
            
            ‚Ä¢ **Promedio Diario**: {daily_average:,.0f} Page Views desde Estados Unidos (total acumulado √∑ {days_in_month} d√≠as transcurridos)
            
            ‚Ä¢ **F√≥rmula**: Promedio Diario √ó {days_total_month} d√≠as del mes = {projected_monthly:,.0f} Page Views proyectados
            
            ‚Ä¢ **Filtro Geogr√°fico**: Solo se consideran Page Views provenientes de Estados Unidos seg√∫n Google Analytics 4
            
            ‚Ä¢ **Consideraciones**: Esta proyecci√≥n asume que el ritmo de publicaci√≥n y engagement desde Estados Unidos se mantiene constante. 
            Los fines de semana, feriados, eventos deportivos especiales o cambios en la estrategia editorial pueden afectar el resultado final.
            
            ‚Ä¢ **Solo URLs del Sheet**: Se consideran √∫nicamente los art√≠culos registrados en el Google Sheet, no todo el tr√°fico del sitio.
            """)
        
        with tab2:
            st.subheader("üìã Datos Combinados (Sheet + GA4)")
            
            # B√∫squeda
            search = st.text_input("üîç Buscar:", "")
            display_df = merged_df.copy()
            
            if search:
                mask = display_df.astype(str).apply(lambda x: x.str.contains(search, case=False, na=False)).any(axis=1)
                display_df = display_df[mask]
            
            # Seleccionar solo las columnas espec√≠ficas
            columns_to_show = ['titulo', 'url', 'datePub', 'autor', 'screenPageViews']
            available_columns = [col for col in columns_to_show if col in display_df.columns]
            
            if available_columns:
                display_filtered = display_df[available_columns].copy()
                
                # Renombrar columnas para mejor presentaci√≥n
                column_names = {
                    'titulo': 'T√≠tulo',
                    'url': 'URL',
                    'datePub': 'Fecha de Publicaci√≥n',
                    'autor': 'Autor',
                    'screenPageViews': 'Page Views'
                }
                display_filtered = display_filtered.rename(columns=column_names)
                
                # Mostrar DataFrame filtrado
                st.dataframe(display_filtered, use_container_width=True, height=500)
            else:
                st.warning("No se encontraron las columnas requeridas en los datos")
            
            # Descarga
            csv = display_df.to_csv(index=False)
            st.download_button(
                label="üì• Descargar datos",
                data=csv,
                file_name=f"ole_usa_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            )
        
        with tab3:
            st.subheader("üîù Top P√°ginas")
            
            # Selector de m√©trica
            metric_options = [col for col in ['sessions', 'totalUsers', 'screenPageViews', 'newUsers'] 
                            if col in merged_df.columns]
            
            if metric_options:
                selected_metric = st.selectbox("Seleccionar m√©trica:", metric_options)
                top_n = st.slider("N√∫mero de p√°ginas a mostrar:", 5, 50, 20)
                
                # Top p√°ginas
                top_df = merged_df.nlargest(top_n, selected_metric)[['url_normalized', selected_metric]]
                
                # Gr√°fico
                fig_top = go.Figure(data=[
                    go.Bar(
                        x=top_df[selected_metric],
                        y=top_df['url_normalized'],
                        orientation='h',
                        marker_color=media_config['color']
                    )
                ])
                fig_top.update_layout(
                    title=f"Top {top_n} P√°ginas por {selected_metric}",
                    xaxis_title=selected_metric,
                    yaxis_title="URL",
                    height=max(400, top_n * 20),
                    yaxis=dict(autorange="reversed")
                )
                st.plotly_chart(fig_top, use_container_width=True)
                
                # Tabla de datos
                st.dataframe(top_df, use_container_width=True)
        
        with tab4:
            st.subheader("üìà Crecimiento")
            
            # Selector de tipo de comparaci√≥n
            col1, col2 = st.columns([1, 3])
            
            with col1:
                comparison_type = st.selectbox(
                    "Tipo de comparaci√≥n:",
                    ["day", "week", "month", "90days", "custom"],
                    format_func=lambda x: {
                        "day": "D√≠a vs D√≠a anterior",
                        "week": "Semana vs Semana anterior", 
                        "month": "Mes vs Mes anterior",
                        "90days": "90 d√≠as vs 90 d√≠as anteriores",
                        "custom": "Per√≠odo personalizado"
                    }[x],
                    key="comparison_type_ole"
                )
            
            # Obtener URLs normalizadas del Sheet para filtrar
            sheets_urls = None
            if not sheets_filtered.empty and 'url_normalized' in merged_df.columns:
                sheets_urls = merged_df['url_normalized'].dropna().unique().tolist()
            
            # Si es personalizado, mostrar selectores de fecha
            if comparison_type == "custom":
                st.markdown("**Per√≠odo Actual:**")
                col1, col2 = st.columns(2)
                with col1:
                    current_start = st.date_input(
                        "Inicio actual:",
                        value=datetime.now() - timedelta(days=7),
                        key="growth_current_start_ole"
                    )
                with col2:
                    current_end = st.date_input(
                        "Fin actual:",
                        value=datetime.now(),
                        key="growth_current_end_ole"
                    )
                
                st.markdown("**Per√≠odo de Comparaci√≥n:**")
                col3, col4 = st.columns(2)
                with col3:
                    previous_start = st.date_input(
                        "Inicio comparaci√≥n:",
                        value=datetime.now() - timedelta(days=14),
                        key="growth_previous_start_ole"
                    )
                with col4:
                    previous_end = st.date_input(
                        "Fin comparaci√≥n:",
                        value=datetime.now() - timedelta(days=8),
                        key="growth_previous_end_ole"
                    )
                
                # Obtener datos personalizados
                growth_data = get_ga4_growth_data_custom(
                    media_config['property_id'],
                    credentials_file,
                    current_start,
                    current_end,
                    previous_start,
                    previous_end,
                    sheets_urls
                )
            else:
                # Obtener datos predefinidos
                growth_data = get_ga4_growth_data(
                    media_config['property_id'],
                    credentials_file,
                    comparison_type,
                    sheets_urls
                )
            
            if growth_data:
                st.success(f"üìä Comparando: {growth_data['period_name']}")
                
                # Mostrar per√≠odos
                col1, col2 = st.columns(2)
                with col1:
                    st.info(f"**Per√≠odo Actual:** {growth_data['current_period']}")
                with col2:
                    st.info(f"**Per√≠odo Anterior:** {growth_data['previous_period']}")
                
                st.markdown("---")
                
                # M√©tricas de crecimiento
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    pv_data = growth_data['data']['pageviews']
                    growth_pct = pv_data['growth_percentage']
                    delta_color = "normal" if growth_pct >= 0 else "inverse"
                    st.metric(
                        "üìä Page Views",
                        f"{pv_data['current']:,}",
                        delta=f"{growth_pct:+.1f}% ({pv_data['growth_absolute']:+,})",
                        delta_color=delta_color
                    )
                
                with col2:
                    sessions_data = growth_data['data']['sessions']
                    growth_pct = sessions_data['growth_percentage']
                    delta_color = "normal" if growth_pct >= 0 else "inverse"
                    st.metric(
                        "üë• Sesiones",
                        f"{sessions_data['current']:,}",
                        delta=f"{growth_pct:+.1f}% ({sessions_data['growth_absolute']:+,})",
                        delta_color=delta_color
                    )
                
                with col3:
                    users_data = growth_data['data']['users']
                    growth_pct = users_data['growth_percentage']
                    delta_color = "normal" if growth_pct >= 0 else "inverse"
                    st.metric(
                        "üîó Usuarios",
                        f"{users_data['current']:,}",
                        delta=f"{growth_pct:+.1f}% ({users_data['growth_absolute']:+,})",
                        delta_color=delta_color
                    )
                
                st.markdown("---")
                
                # Gr√°fico de comparaci√≥n
                metrics = ['pageviews', 'sessions', 'users']
                metric_names = ['Page Views', 'Sesiones', 'Usuarios']
                current_values = [growth_data['data'][m]['current'] for m in metrics]
                previous_values = [growth_data['data'][m]['previous'] for m in metrics]
                
                # Crear DataFrame para el gr√°fico
                import pandas as pd
                chart_data = pd.DataFrame({
                    'M√©trica': metric_names + metric_names,
                    'Valor': current_values + previous_values,
                    'Per√≠odo': ['Actual'] * 3 + ['Anterior'] * 3
                })
                
                fig_comparison = px.bar(
                    chart_data,
                    x='M√©trica',
                    y='Valor',
                    color='Per√≠odo',
                    barmode='group',
                    title=f'Comparaci√≥n de M√©tricas: {growth_data["period_name"]}',
                    color_discrete_map={
                        'Actual': media_config['color'],
                        'Anterior': '#cccccc'
                    }
                )
                st.plotly_chart(fig_comparison, use_container_width=True)
                
                # Gr√°fico de crecimiento porcentual
                growth_percentages = [growth_data['data'][m]['growth_percentage'] for m in metrics]
                colors = ['green' if x >= 0 else 'red' for x in growth_percentages]
                
                fig_growth = go.Figure(data=[
                    go.Bar(
                        x=metric_names,
                        y=growth_percentages,
                        marker_color=colors,
                        text=[f"{x:+.1f}%" for x in growth_percentages],
                        textposition='auto',
                    )
                ])
                
                fig_growth.update_layout(
                    title=f'Crecimiento Porcentual: {growth_data["period_name"]}',
                    yaxis_title='Crecimiento (%)',
                    showlegend=False
                )
                
                # Agregar l√≠nea en y=0
                fig_growth.add_hline(y=0, line_dash="dash", line_color="gray")
                
                st.plotly_chart(fig_growth, use_container_width=True)
                
            else:
                st.error("‚ùå No se pudieron obtener los datos de crecimiento")
    
    elif ga4_df is not None and not ga4_df.empty:
        # Solo datos de GA4
        st.warning(f"‚ö†Ô∏è No se encontraron URLs de {media_config['name']} en el Google Sheet. Mostrando solo datos de GA4.")
        
        # M√©tricas de GA4
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("üìä Sesiones", f"{ga4_df['sessions'].sum():,.0f}")
        with col2:
            st.metric("üë• Usuarios", f"{ga4_df['totalUsers'].sum():,.0f}")
        with col3:
            st.metric("üëÅÔ∏è Vistas", f"{ga4_df['screenPageViews'].sum():,.0f}")
        with col4:
            st.metric("üìâ Rebote", f"{ga4_df['bounceRate'].mean():.1f}%")
        
        st.markdown("---")
        st.subheader("Datos de Google Analytics 4")
        st.dataframe(ga4_df, use_container_width=True)
    
    else:
        # Solo datos del Sheet
        st.warning("‚ö†Ô∏è No se pudieron obtener datos de GA4. Mostrando solo datos del Google Sheet.")
        st.dataframe(sheets_filtered, use_container_width=True)

# Footer
st.markdown("---")
st.caption(f"üìä Dashboard de {media_config['name']} | Property ID: {media_config['property_id']} | Dominio: {media_config['domain']}")